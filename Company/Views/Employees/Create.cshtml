@model Company.Models.Employee

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Employee</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="EmployeeNo" class="control-label"></label>
                <input asp-for="EmployeeNo" class="form-control" />
                <span asp-validation-for="EmployeeNo" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control" />
                <span asp-validation-for="DateOfBirth" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Gender">Gender</label>
                <div>
                    <input asp-for="Gender" id="male" name="Gender" type="radio" value="Male">
                    <label for="male">Male</label>
                    <input asp-for="Gender" id="female" name="Gender" type="radio" value="Female" >
                    <label for="female">Female</label>
                </div>
                <span asp-validation-for="Gender" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Department">Department</label>
                <select asp-for="Department" asp-items="@(ViewData["Departments"] as SelectList)" class="form-control">
                    <option value="">Select Department</option>
                </select>
                <span asp-validation-for="Department" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Position">Position</label>
                <select asp-for="Position" asp-items="@(ViewData["Positions"] as SelectList)" class="form-control">
                    <option value="">Select Position</option>
                </select>
                <span asp-validation-for="Position" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>

        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <script>
        const departmentSelect = document.querySelector("#Department");
        const positionSelect = document.querySelector("#Position");

        function updatePositions() {
            const department = departmentSelect.value;
            const roles = @Html.Raw(Json.Serialize(ViewData["Roles"] as List<Company.Models.Role>));

            const filteredPositions = roles.filter(role => role.department === department);

            positionSelect.innerHTML = '<option value="">Select Position</option>';

            filteredPositions.forEach(position => {
                const option = document.createElement("option");
                option.value = position.position;
                option.text = position.position;
                positionSelect.add(option);
            });
        }

        departmentSelect.addEventListener("change", () => {
            updatePositions();
        });

        // Call the updatePositions function when the page is loaded to pre-populate the positions dropdown list
        updatePositions();

        //const createForm = document.querySelector('#create-form');
        //const employeeNoInput = document.querySelector('#employee-no-input');

        //createForm.addEventListener('submit', async (event) => {
        //    event.preventDefault(); // prevent form submission

        //    const employeeNo = employeeNoInput.value;
        //    // Check if employee number already exists
        //    const response = await fetch(`/employees/check?employeeNo=${employeeNo}`);
        //    const data = await response.json();
        //    const employeeExists = data.exists;

        //    if (employeeExists) {
        //        // Display error message
    
        //        const errorMessage = document.createElement('div');
        //        errorMessage.textContent = 'Employee number already exists.';
        //        errorMessage.classList.add('text-danger');
        //        employeeNoInput.parentNode.insertBefore(errorMessage, employeeNoInput.nextSibling);
        //    } else {
        //        // Submit form if employee number does not exist
        //        createForm.submit();
        //    }
        //});
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

